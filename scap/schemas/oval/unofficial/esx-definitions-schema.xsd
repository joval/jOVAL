<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:esx-def="http://oval.mitre.org/XMLSchema/oval-definitions-5#esx" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="http://oval.mitre.org/XMLSchema/oval-definitions-5#esx" elementFormDefault="qualified" version="5.11">
    <xsd:import namespace="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
    <xsd:annotation>
        <xsd:documentation>The following is a proposal for the experimental esx-def tests and esx-sc: items that will support assessments of VMware ESXi hosts and Virtual Machines.</xsd:documentation>
        <xsd:appinfo>
            <schema>Experimental Schema for VMware ESXi Tests</schema>
            <version>5.11.2</version>
            <date>8/11/2014 8:00:00 AM</date>
            <terms_of_use>Copyright (c) 2002-2013, The MITRE Corporation. All rights reserved. The contents of this file are subject to the terms of the OVAL License located at http://oval.mitre.org/oval/about/termsofuse.html. See the OVAL License for the specific language governing permissions and limitations for use of this schema. When distributing copies of the OVAL Schema, this license header must be included.</terms_of_use>
            <sch:ns prefix="oval-def" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5"/>
            <sch:ns prefix="esx" uri="http://oval.mitre.org/XMLSchema/oval-definitions-5#esx"/>
            <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
        </xsd:appinfo>
    </xsd:annotation>
    
    <!-- =============================================================================== -->
    <!-- Host Acceptance Level Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_acceptancelevel_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_acceptancelevel_test is used to determine if the software installed for the VMHost represents untested code.  
                It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description 
                for more information. The required object element references a host_acceptancelevel_object and the optional state element 
                specifies the data to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Foreach ($VMHost in Get-VMHost ) {
    $ESXCli = Get-EsxCli -VMHost $VMHost
    $VMHost | Select Name, @{N="AcceptanceLevel";E={$ESXCli.software.acceptance.get()}}
}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_acceptancelevel_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_acceptancelevel_object element is used by the host_acceptancelevel_test to define the object to be evaluated.  
                Each object extends the standard ObjecType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_acceptancelevel_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_acceptancelevel_state element defines the information that can be used to evaluate the specified ESXi hosts acceptance level information.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="acceptance_level" type="esx-def:EntityStateAcceptanceLevelType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The software acceptance level for the associated ESXi host.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host VIB Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_vib_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_vib_test is used to test various properties of software installed for a vSphere Installation Bundle (VIB).  
                A VIB is a collection of files that are packaged into an archive. The VIB contains a signature 
                file that is used to verify the level of trust.  It extends the standard TestType as defined in the oval-definitions-schema 
                and one should refer to the TestType description for more information. The required object element references a 
                host_vib_object and the optional state element specifies the data to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Foreach ($VMHost in Get-VMHost ) {
    $ESXCli = Get-EsxCli -VMHost $VMHost
    $ESXCli.software.vib.list()
}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_vib_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_vib_object element is used by the host_vib_test to define the object to be evaluated.  
                Each object extends the standard ObjecType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="vib_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the VIB to collect.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_vib_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_vib_state element defines the information that can be used to evaluate the specified VIB information.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="vib_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The VIB name</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="acceptance_level" type="esx-def:EntityStateAcceptanceLevelType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The software acceptance level for the associated VIB</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="creation_date" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>VIB Creation Date</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="vendor" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>VIB Vendor</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="version" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>VIB Version</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Module Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_module_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_modules_test is used to determine if any ESXi host's loaded kernel modules lack valid digital signatures.  
                It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description 
                for more information. The required object element references a host_modules_object and the optional state element 
                specifies the data to check.
            </xsd:documentation>
            <xsd:documentation>
                VMware provides digital signatures for kernel modules. By default the ESXi host does not permit loading of kernel modules 
                that lack a valid digital signature. However, this behavior can be overridden allowing unauthorized kernel modules to be loaded. 
                Untested or malicious kernel modules loaded on the ESXi host can put the host at risk for instability and/or exploitation.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Foreach ($VMHost in Get-VMHost ) {
    $ESXCli = Get-EsxCli -VMHost $VMHost
    $ESXCli.system.module.list() | Foreach {
        $ESXCli.system.module.get($_.Name) | Select @{N="VMHost";E={$VMHost}}, Module, License, Modulefile, Version, SignedStatus, SignatureDigest, SignatureFingerPrint
    }
}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_module_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_module_object element is used by the host_module_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="module_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the kernel module to collect.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_module_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_module_state element defines the information that can be used to evaluate the specified ESXi hosts loaded kernel module information.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="module_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the kernel module</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="license" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the license holder for the kernel module.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="module_file" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The path to the kernel module file.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="version" type="oval-def:EntityStateVersionType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The kernel module version information.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="acceptance_level" type="esx-def:EntityStateAcceptanceLevelType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The software acceptance level of the kernel module.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Core Dump Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_coredump_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_coredump_test is used to validate the configuration of a centralized location to collect ESXi host core dumps.  
                The VMware vSphere Network Dump Collector service allows for collecting diagnostic information from a host that experiences a critical fault. 
                It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description 
                for more information. The required object element references a host_coredump_object and the optional state element 
                specifies the data to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Foreach ($VMHost in Get-VMHost ) {
    $ESXCli = Get-EsxCli -VMHost $VMHost;
    $ESXCli.system.coredump.network.get() | Select @{N="VMHost";E={$VMHost}}, Enabled, HostVnic, NetworkServerIP, NetworkServerPort
}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_coredump_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_coredump_object element is used by the host_coredump_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_coredump_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_coredump_state element defines the information that can be used to evaluate the specified ESXi hosts core dump information.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="enabled" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Displays whether or not the ESXi dump collector is enabled for the ESXi host</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="host_vnic" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The ESXi host's configured core dump destination vnic</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="network_server_ip" type="oval-def:EntityStateIPAddressStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The ESXi host's configured core dump destination IP</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="network_server_port" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The ESXi host's configured core dump destination port</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Web Server SSL Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_webserverssl_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_webserverssl_test is used to determine if any expired or revoked SSL certificates exist on the ESXi host.  
                It extends the standard TestType as defined in the oval-definitions-schema and one should refer to the TestType description 
                for more information. The required object element references a host_webserverssl_object and the optional state element 
                specifies the data to check.
            </xsd:documentation>
            <xsd:documentation>
                Leaving expired or revoked certificates on your vCenter Server system can compromise your environment. By default, each 
                ESXi host does not have Certificate Revocation Lists (CRL) checking available. Revoked certificates must be checked and 
                removed manually. Replacing certificates will avoid having users get used to clicking through browser warnings. The 
                warning might be an indication of a man-in-the-middle attack, and only inspection of the certificate and thumbprint can 
                guard against such attacks.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VMHost | Foreach { 
    Test-WebServerSSL -URL $_.Name | Select OriginalURi, CertificateIsValid, Issuer, 
    @{N="Expires";E={$_.Certificate.NotAfter} }, 
    @{N="DaysTillExpire";E={(New-TimeSpan -Start (Get-Date) -End ($_.Certificate.NotAfter)).Days} }
}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_webserverssl_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_webserverssl_object element is used by the host_webserverssl_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_webserverssl_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_webserverssl_state element defines the information that can be used to evaluate the specified ESXi hosts web server ssl certificate information.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="certificate_is_valid" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Whether or not the ESXi host certificate is valid for current date</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="issuer" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The certificate issuer</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="expires" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The certificate expiration date and time (formatted as a string)</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="days_till_expire" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The number of days before the certificate expires</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Authentication Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_authentication_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_authentication_test is used to determine if ESXi is configured to use a directory service such as Active Directory 
                to manage users and groups.  It extends the standard TestType as defined in the oval-definitions-schema and one should refer 
                to the TestType description for more information. The required object element references a host_authentication_object and the 
                optional state element specifies the data to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VMHost | Get-VMHostAuthentication | Select VmHost, Domain, DomainMembershipStatus
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_authentication_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_authentication_object element is used by the host_authentication_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_authentication_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_authentication_state element defines the information that can be used to evaluate the specified ESXi hosts domain and domain membership information.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="domain" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the domain</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="domain_membership_status" type="esx-def:EntityStateDomainMembershipStatusType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The status of the ESXi host's membership in the domain</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Account Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_account_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_account_test is used to determine certain aspects of the user accounts on an ESXi host.  
                It extends the standard TestType as defined in the oval-definitions-schema and one should refer 
                to the TestType description for more information. The required object element references a host_account_object and the 
                optional state element specifies the data to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VMHostAccount | Select Name, Domain, Description, ShellAccessEnabled
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_account_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_account_object element is used by the host_account_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="account_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The account_name element details the name of the VMHost's user account to collect.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_account_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_account_state element defines the information that can be used to evaluate the specified ESXi host user account information.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="account_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The user account name on the ESXi host</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="domain" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the domain to which the user account belongs</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="description" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Descriptive information about the user account</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="shell_access_enabled" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>true if ESXi shell access is enabled for the user account; false otherwise</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="role" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>the role granted to the host account</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Advanced Setting Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_advancedsetting_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_advancedsetting_test is used to collect advanced configuration information from an ESXi host.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a host_advancedconfig_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VMHost | Get-AdvancedSetting -Name "ADVANCED_SETTING_NAME" | Select @{N="VMHost";E={$_.Entity}}, Name, Value
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_advancedsetting_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_advancedsetting_object element is used by the host_advancedconfig_test to define those objects to be evaluated based on a specified state.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="advanced_setting_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The host_advancedsetting_name element details the name of the VMHost's advanced configuration setting to collect.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_advancedsetting_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_advancedsetting_state details the values which may be applied to a given advanced configuration item.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="advanced_setting_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The advanced_setting_name element details the name of the Host's advanced configuration setting to collect.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="advanced_setting_value" type="oval-def:EntityStateAnySimpleType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The advanced_setting_value element details the value of the Host's advanced configuration setting that was collected.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Service Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_service_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_service_test is used to collect service-related configuration information from an ESXi host.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a host_service_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VMHost | Get-VMHostService | Where { $_.key -eq "SERVICE_NAME" } | Select VMHost, Key, Label, Policy, Running, Required
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_service_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_service_object element is used by the host_service_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="service_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The service_name element details the name of the Host's service setting to collect.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_service_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_service_state details the values which may be applied to a given ESXi host's service item.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="service_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The host_service_name element details the name of the VMHost's service setting to collect.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="service_label" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Descriptive information regarding the service</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="service_policy" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The activation policy for the host service.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="service_running" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>true if the service is currently running; false otherwise</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="service_required" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>true if the service is required to be running on the host; false otherwise</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- =============================================================================== -->
    <!-- Host NTP Server Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_ntpserver_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_ntpserver_test is used to collect configuration information for any NTP servers added to an ESXi host.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a host_ntpserver_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VMHost | Select Name, @{N="NTPSetting";E={$_ | Get-VMHostNtpServer}}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_ntpserver_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_ntpserver_object element is used by the host_ntpserver_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_ntpserver_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_ntpserver_state details the values which may be applied to a given ESXi host's NTP Server configuration.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="ntp_server_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The domain name or the IP address of the NTP server(s) added to the host</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Lockdown Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_lockdown_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_lockdown_test is used to collect lockdown mode configuration information for an ESXi host.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a host_lockdown_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VMHost | Select Name, @{N="Lockdown";E={$_.Extensiondata.Config.adminDisabled}}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_lockdown_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_lockdown_object element is used by the host_lockdown_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_lockdown_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_lockdown_state details the values which may be applied to a given ESXi host's Lockdown mode configuration.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="lockdown" type="esx-def:EntityStateLockdownType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>If lockdown mode is active, all management must be done from vCenter to ensure proper permissions and roles are being applied.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="lockdown_user" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The value identifying a user account that is allowed to connect when the ESXi host is in lockdown mode.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Firewall Exception Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_firewallexception_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_firewallexception_test is used to collect ESXi firewall configuration information for an ESXi host.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a host_firewallexception_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Foreach ($VMHost in Get-VMHost ) {
    Get-VMHost $VMHost | Get-VMHostFirewallException | Where {$_.Enabled -and ($_.ExtensionData.AllowedHosts.AllIP)} 
        | Select @{N="VMHost";E={$VMHost}},Name,IncomingPorts,OutgoingPorts,Protocols,ServiceEnabled
}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_firewallexception_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_firewallexception_object element is used by the host_firewallexception_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="firewall_exception_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Firewall exception name.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_firewallexception_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_firewallexception_state details the values which may be applied to a given ESXi host's firewall configuration.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="firewall_exception_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the firewall exception</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="exception_enabled" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Whether or not the exception is enabled</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="port" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The port number</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="end_port" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>For a port range, the ending port number</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="direction" type="esx-def:EntityStateFirewallDirectionType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The port direction</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="protocol" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The protocols included in the firewall exception</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="service_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The service associated with this firewall exception</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="service_running" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>If the value is true, the specified firewall exceptions are enabled. If false, the firewall exceptions are disabled.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="allowed_hosts_all_ip" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>If the value is true, the specified firewall exceptions are valid for all ip addresses.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Bus Adapter Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_busadapter_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_busadapter_test is used to collect information about ESXi host bus adapters.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a host_busadapter_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VMHost | Get-VMHostHba | Where {$_.Type -eq "Iscsi"} | Select VMHost, Device, @{N="ChapType";E={$_.AuthenticationProperties.ChapType}}, @{N="CHAPName";E={$_.AuthenticationProperties.ChapName}}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_busadapter_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_busadapter_object element is used by the host_busadapter_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="busadapter_type" type="esx-def:EntityObjectBusAdapterType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Specify the type of the HBAs you want to retrieve. The valid values are Block, FibreChannel, iSCSI, and ParallelSCSI.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_busadapter_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_busadapter_state details the values which may be applied to a given ESXi host's bus adapters.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="device_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="busadapter_type" type="esx-def:EntityStateBusAdapterType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="busadapter_key" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="busadapter_model" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="busadapter_pci" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="busadapter_driver" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="busadapter_bus" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="busadapter_status" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="chap_type" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="chap_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="mutual_chap_enabled" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="mutual_chap_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation></xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Virtual Switch Policy Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_vswitchpolicy_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_vswitch_policy_test is used to collect information about various vSwitch policies on ESXi host vSwitches.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a host_vswitch_policy_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VirtualSwitch -Standard | Select VMHost, Name, 
    @{N="MacChanges";E={if ($_.ExtensionData.Spec.Policy.Security.MacChanges) { "Accept" } Else { "Reject" } }}, 
    @{N="PromiscuousMode";E={if ($_.ExtensionData.Spec.Policy.Security.PromiscuousMode) { "Accept" } Else { "Reject" } }}, 
    @{N="ForgedTransmits";E={if ($_.ExtensionData.Spec.Policy.Security.ForgedTransmits) { "Accept" } Else { "Reject" } }}
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_vswitchpolicy_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_vswitch_policy_object element is used by the host_vswitch_policy_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="vswitch_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Specify the names of the virtual switches you want to retrieve.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_vswitchpolicy_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_vswitch_policy_state details the values which may be applied to the properties of an ESXi host's virtual switches.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="vswitch_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Specify the names of the virtual switches you want to retrieve.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="mac_changes" type="esx-def:EntityStateAcceptRejectType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Get the vSwitch MAC Address Change policy for each vSwitch.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="promiscuous_mode" type="esx-def:EntityStateAcceptRejectType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Get the vSwitch Promiscuous Mode policy for each vSwitch.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="forged_transmits" type="esx-def:EntityStateAcceptRejectType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Get the vSwitch Forged Transmits policy for each vSwitch</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    
    <!-- =============================================================================== -->
    <!-- Virtual Machine Specific Schema Objects -->
    <!-- =============================================================================== -->
    <xsd:complexType name="VMObjectBaseType">
        <xsd:annotation>
            <xsd:documentation>Base type for VM-based Objects</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="oval-def:ObjectType">
                <xsd:sequence>
                    <xsd:choice>
                        <xsd:element ref="oval-def:set"/>
                        <xsd:sequence>
                            <xsd:element name="vm_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                                <xsd:annotation>
                                    <xsd:documentation>The name of the Virtual Machine on the ESXi host for which to collect the device settings.</xsd:documentation>
                                </xsd:annotation>
                            </xsd:element>
                            <!--<xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>-->
                        </xsd:sequence>
                    </xsd:choice>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="VMStateBaseType">
        <xsd:annotation>
            <xsd:documentation>Base type for VM-based States</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="oval-def:StateType">
                <xsd:sequence>
                    <xsd:element name="vm_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>The name of the Virtual Machine on the ESXi host for which information is collected.</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <!-- =============================================================================== -->
    <!-- Virtual Machine Advanced Setting Test -->
    <!-- =============================================================================== -->
    <xsd:element name="vm_advancedsetting_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The vm_advancedsetting_test is used to collect information about various virtual machine settings on an ESXi host.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a vm_advancedsetting_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VM | Get-AdvancedSetting -Name  "ADVANCED_SETTING_NAME" | Select Entity, Name, Value
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vm_advancedsetting_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The vm_advancedsetting_object element is used by the vm_advancedsetting_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="esx-def:VMObjectBaseType">
                    <xsd:sequence>
                        <xsd:element name="advanced_setting_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the advanced setting to be collected</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vm_advancedsetting_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The vm_advancedsetting_state details the values which may be applied to the properties of an ESXi host's virtual machines.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="esx-def:VMStateBaseType">
                    <xsd:sequence>
                        <xsd:element name="advanced_setting_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of the advanced setting to be collected</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="advanced_setting_value" type="oval-def:EntityStateAnySimpleType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The advanced setting value</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Virtual Machine Device Test -->
    <!-- =============================================================================== -->
    
    <!--
        The VMDeviceStateType defines the common state information that can be tested for 
        any VM device type.  Specific state elements will be created extending this type 
        in order to test for device-type-specific settings.
    -->
    <xsd:complexType name="VMDeviceStateType">
        <xsd:annotation>
            <xsd:documentation>Base type for VM Devices</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="esx-def:VMStateBaseType">
                <xsd:sequence>
                    <xsd:element name="device_type" type="esx-def:EntityStateVMDeviceType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>The device type; one of the values in the enumeration (floppy, cdrom, parallel, etc).</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="device_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>The name of the device</xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <!-- ConnectInfo booleans -->
                    <xsd:element name="allow_guest_control" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation></xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="connected" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation></xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="start_connected" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation></xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:element name="vm_device_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The vm_device_test is used to collect information about various virtual machine device settings on an ESXi host.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a vm_device_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VM | Get-FloppyDrive
Get-VM | Get-CDDrive
Get-VM | Get-ParallelPort
Get-VM | Get-SerialPort
Get-VM | Get-USBDevice
Get-VM | Get-HardDisk
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vm_device_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The vm_device_object element is used by the vm_device_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="esx-def:VMObjectBaseType">
                    <xsd:sequence>
                        <xsd:element name="device_type" type="esx-def:EntityObjectVMDeviceType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The device type; one of the values in the enumeration (floppy, cdrom, parallel, etc).</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vm_device_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The vm_device_state details the values which may be applied to the properties of devices attached to an ESXi host's virtual machines.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="esx-def:VMDeviceStateType"/>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <xsd:element name="vm_harddiskdevice_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The vm_harddisk_device_test is used to collect information about hard disk device settings on an ESXi host.  
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a vm_harddisk_device_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VM | Get-HardDisk
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vm_harddiskdevice_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The vm_harddisk_device_object element is used by the vm_harddisk_device_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="esx-def:VMObjectBaseType">
                    <xsd:sequence>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vm_harddiskdevice_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The vm_harddisk_device_state details the values which may be applied to the properties of hard disk devices attached to an ESXi host's virtual machines.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="esx-def:VMDeviceStateType">
                    <xsd:sequence>
                        <xsd:element name="persistence" type="esx-def:EntityStateVMDevicePersistenceType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The persistence policy (Persistent, NonPersistent, Undoable, IndependentPersistent, IndependentNonPersistent, or Unknown</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Host Port Group Test -->
    <!-- =============================================================================== -->
    <xsd:element name="host_portgroup_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                The host_portgroup_test is used to retrieve the available port groups of hosts, virtual machines, and virtual switches.   
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a host_portgroup_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VirtualPortGroup -Standard | Select Name, VirtualSwitch, VlanID
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_portgroup_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
                The host_portgroup_object element is used by the host_portgroup_test to define the object to be evaluated.  
                Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
                description for more information.  The common set element allows complex objects to be created using filters and set logic.  
                Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:element name="port_group_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Specify the names of the port groups you want to retrieve.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="virtual_switch_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Specify the virtual switches for which you want to retrieve their port groups.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="host_portgroup_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The host_portgroup_state details the values which may be applied to the port groups of hosts, virtual machines, and virtual switches.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="port_group_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The names of the port groups you want to retrieve</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="virtual_switch_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The virtual switches for which you want to retrieve their port groups.</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="vlan_id" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The ID of the VLan</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Virtual Distributed Switch Test -->
    <!-- =============================================================================== -->
    <xsd:element name="vds_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a vds_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
$vds = Get-VDSwitch
$vds.ExtensionData.Config.HealthCheckConfig
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vds_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
          <xsd:documentation>
              The vds_object element is used by the vds_test to define the object to be evaluated.  
              Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
              description for more information.  The common set element allows complex objects to be created using filters and set logic.  
              Again, please refer to the description of the set element in the oval-definitions-schema.
          </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="vds_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                                    <xsd:annotation>
                                        <xsd:documentation>
                                            The name of a vSphere Distributed Switch
                                        </xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vds_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
          <xsd:documentation>
              The vds_state details the values which may be applied to vSphere Distributed Switch.
          </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="vds_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of a vSphere Distributed Switch</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="vlan_mtu_health_check_enabled" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>VLAN and MTU Health Check enabled?</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="teaming_failover_health_check_enabled" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Teaming and Failover Health Check enabled?</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Virtual Distributed Port Group Test -->
    <!-- =============================================================================== -->
    <xsd:element name="vds_portgroup_test" substitutionGroup="oval-def:test">
        <xsd:annotation>
            <xsd:documentation>
                This test extends the standard TestType as defined in the oval-definitions-schema and one should refer to the 
                TestType description for more information. The required object element references a vds_portgroup_object 
                and the optional state element specifies the metadata to check.
            </xsd:documentation>
            <xsd:appinfo>
                <example title="PowerCLI Equivalent:">
Get-VDSwitch | Get-VDSPortgroup
                </example>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:TestType">
                    <xsd:sequence>
                        <xsd:element name="object" type="oval-def:ObjectRefType"/>
                        <xsd:element name="state" type="oval-def:StateRefType" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vds_portgroup_object" substitutionGroup="oval-def:object">
        <xsd:annotation>
            <xsd:documentation>
              The vds_portgroup_object element is used by the vds_portgroup_test to define the object to be evaluated.  
              Each object extends the standard ObjectType as defined in the oval-definitions-schema and one should refer to the ObjectType 
              description for more information.  The common set element allows complex objects to be created using filters and set logic.  
              Again, please refer to the description of the set element in the oval-definitions-schema.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:ObjectType">
                    <xsd:sequence>
                        <xsd:choice>
                            <xsd:element ref="oval-def:set"/>
                            <xsd:sequence>
                                <xsd:element name="vds_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                                    <xsd:annotation>
                                        <xsd:documentation>
                                            The name of a vSphere Distributed Switch
                                        </xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element name="portgroup_name" type="oval-def:EntityObjectStringType" minOccurs="1" maxOccurs="1">
                                    <xsd:annotation>
                                        <xsd:documentation>
                                            The name of a vSphere Distributed port group
                                        </xsd:documentation>
                                    </xsd:annotation>
                                </xsd:element>
                                <xsd:element ref="oval-def:filter" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:choice>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="vds_portgroup_state" substitutionGroup="oval-def:state">
        <xsd:annotation>
            <xsd:documentation>
                The vds_portgroup_state details the values which may be applied to vSphere Distributed Switch portgroup.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="oval-def:StateType">
                    <xsd:sequence>
                        <xsd:element name="vds_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of a vSphere Distributed Switch</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="portgroup_name" type="oval-def:EntityStateStringType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>The name of a vSphere Distributed port group</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="collector_ip_address" type="oval-def:EntityStateIPAddressType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Authorized collector IP Address to which Virtual Disributed Switch Netflow traffic is sent</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="collector_port" type="oval-def:EntityStateIntType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Authorized collector Port to which Virtual Disributed Switch Netflow traffic is sent</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="override_port_policies_enabled" type="oval-def:EntityStateBoolType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Port-level configuration overrides enabled?</xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    
    <!-- =============================================================================== -->
    <!-- Data Types -->
    <!-- =============================================================================== -->
    
    <xsd:complexType name="EntityStateAcceptanceLevelType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="VMwareCertified">
                    <xsd:annotation>
                        <xsd:documentation>Created, tested and signed by VMware</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="VMwareAccepted">
                    <xsd:annotation>
                        <xsd:documentation>Created by a VMware partner but tested and signed by VMware</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="PartnerSupported">
                    <xsd:annotation>
                        <xsd:documentation>Created, tested and signed by a certified VMware partner</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="CommunitySupported">
                    <xsd:annotation>
                        <xsd:documentation>Not been tested by VMware or a VMware partner</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="Unknown">
                    <xsd:annotation>
                        <xsd:documentation>Unknown</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityStateFirewallDirectionType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="inbound">
                    <xsd:annotation>
                        <xsd:documentation>inbound</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="outbound">
                    <xsd:annotation>
                        <xsd:documentation>outbound</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityStateLockdownType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="disabled">
                    <xsd:annotation>
                        <xsd:documentation>disabled</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="normal">
                    <xsd:annotation>
                        <xsd:documentation>normal</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="strict">
                    <xsd:annotation>
                        <xsd:documentation>strict</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityObjectVMDeviceType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityObjectStringType">
                <xsd:enumeration value="floppy">
                    <xsd:annotation>
                        <xsd:documentation>Floppy Devices</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="cdrom">
                    <xsd:annotation>
                        <xsd:documentation>CDROM Devices</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="parallel_port">
                    <xsd:annotation>
                        <xsd:documentation>Parallel Ports</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="serial_port">
                    <xsd:annotation>
                        <xsd:documentation>Serial Ports</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="usb">
                    <xsd:annotation>
                        <xsd:documentation>USB Devices</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="hard_disk">
                    <xsd:annotation>
                        <xsd:documentation>Hard Disk Drives</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityStateVMDeviceType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="floppy">
                    <xsd:annotation>
                        <xsd:documentation>Floppy Devices</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="cdrom">
                    <xsd:annotation>
                        <xsd:documentation>CDROM Devices</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="parallel_port">
                    <xsd:annotation>
                        <xsd:documentation>Parallel Ports</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="serial_port">
                    <xsd:annotation>
                        <xsd:documentation>Serial Ports</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="usb">
                    <xsd:annotation>
                        <xsd:documentation>USB Devices</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="hard_disk">
                    <xsd:annotation>
                        <xsd:documentation>Hard Disk Drives</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityStateVMDevicePersistenceType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="Persistent">
                    <xsd:annotation>
                        <xsd:documentation>Persistent</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="NonPersistent">
                    <xsd:annotation>
                        <xsd:documentation>NonPersistent</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="Undoable">
                    <xsd:annotation>
                        <xsd:documentation>Undoable</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="IndependentPersistent">
                    <xsd:annotation>
                        <xsd:documentation>IndependentPersistent</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="IndependentNonPersistent">
                    <xsd:annotation>
                        <xsd:documentation>IndependentNonPersistent</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="Append">
                    <xsd:annotation>
                        <xsd:documentation>Append</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityObjectBusAdapterType">
        <xsd:annotation>
            <xsd:documentation>
                The EntityObjectBusAdapterType restricts a string value to a specific set of values: block, fibrechannel, iscsi, and parallelscsi. 
                These values describe the different host bus adapter types on an ESXi server. The empty string 
                is also allowed to support empty element associated with variable references. Note that when using pattern matches and 
                variables care must be taken to ensure that the regular expression and variable values align with the enumerated values.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityObjectStringType">
                <xsd:enumeration value="Block">
                    <xsd:annotation>
                        <xsd:documentation>Block</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="FibreChannel">
                    <xsd:annotation>
                        <xsd:documentation>FibreChannel</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="IScsi">
                    <xsd:annotation>
                        <xsd:documentation>iSCSI</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="ParallelScsi">
                    <xsd:annotation>
                        <xsd:documentation>Parallel SCSI</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityStateBusAdapterType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="Block">
                    <xsd:annotation>
                        <xsd:documentation>Block</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="FibreChannel">
                    <xsd:annotation>
                        <xsd:documentation>FibreChannel</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="IScsi">
                    <xsd:annotation>
                        <xsd:documentation>iSCSI</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="ParallelScsi">
                    <xsd:annotation>
                        <xsd:documentation>Parallel SCSI</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityStateAcceptRejectType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="Accept">
                    <xsd:annotation>
                        <xsd:documentation>Accept Policy Changes</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="Reject">
                    <xsd:annotation>
                        <xsd:documentation>Reject Policy Changes</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityObjectDomainMembershipStatusType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityObjectStringType">
                <xsd:enumeration value="ClientTrustBroken">
                    <xsd:annotation>
                        <xsd:documentation>ClientTrustBroken</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="InconsistentTrust">
                    <xsd:annotation>
                        <xsd:documentation>InconsistentTrust</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="NoServers">
                    <xsd:annotation>
                        <xsd:documentation>NoServers</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="Ok">
                    <xsd:annotation>
                        <xsd:documentation>Ok</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="OtherProblem">
                    <xsd:annotation>
                        <xsd:documentation>OtherProblem</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="ServerTrustBroken">
                    <xsd:annotation>
                        <xsd:documentation>ServerTrustBroken</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="Unknown">
                    <xsd:annotation>
                        <xsd:documentation>Unknown</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:complexType name="EntityStateDomainMembershipStatusType">
        <xsd:annotation>
            <xsd:documentation></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
            <xsd:restriction base="oval-def:EntityStateStringType">
                <xsd:enumeration value="ClientTrustBroken">
                    <xsd:annotation>
                        <xsd:documentation>ClientTrustBroken</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="InconsistentTrust">
                    <xsd:annotation>
                        <xsd:documentation>InconsistentTrust</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="NoServers">
                    <xsd:annotation>
                        <xsd:documentation>NoServers</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="Ok">
                    <xsd:annotation>
                        <xsd:documentation>Ok</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="OtherProblem">
                    <xsd:annotation>
                        <xsd:documentation>OtherProblem</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="ServerTrustBroken">
                    <xsd:annotation>
                        <xsd:documentation>ServerTrustBroken</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="Unknown">
                    <xsd:annotation>
                        <xsd:documentation>Unknown</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
                <xsd:enumeration value="">
                    <xsd:annotation>
                        <xsd:documentation>The empty string value is permitted here to allow for empty elements associated with variable references.</xsd:documentation>
                    </xsd:annotation>
                </xsd:enumeration>
            </xsd:restriction>
        </xsd:simpleContent>
    </xsd:complexType>
</xsd:schema>
